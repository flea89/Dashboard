{
  "name": "grunt-express",
  "description": "Start (and supervise) an Express.js web server using grunt.js, works well with socket.io",
  "version": "0.1.3",
  "homepage": "https://github.com/gruntjs/grunt-contrib-connect",
  "author": {
    "name": "Brian Lai"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/blai/grunt-express.git"
  },
  "bugs": {
    "url": "https://github.com/blai/grunt-express/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "express": "~3.1.0",
    "nopt": "~2.1.1",
    "supervisor": "~0.5.2",
    "connect": "~2.7.3"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-internal": "~0.4.2",
    "grunt": "~0.4.0",
    "express": "~3.1.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "server",
    "express",
    "connect",
    "socket.io",
    "watch",
    "http"
  ],
  "readme": "# grunt-express [![Build Status](https://secure.travis-ci.org/blai/grunt-express.png?branch=master)](http://travis-ci.org/blai/grunt-express)\n\n> Start an express/connect web server.\nThis plugin is largely based on grunt-contrib-connect. It aims to solve the following use cases that grunt-contrib-connect does not seem to have an answer for:\n\n1. Enabling custom express/connect server, especially in cases when socket.io is in the mix (https://github.com/yeoman/express-stack/issues/15#issuecomment-13217532)\n2. Watch for changes to the server script(s) and restart the express/connect server (https://github.com/yeoman/express-stack/issues/7)\n\n\n## Sample app\n[grunt-express-example](https://github.com/blai/grunt-express-example) is a minimal example that shows how you can use `grunt-express` to run a basic express/socket.io server set. It will auto-restart server when change is detected.\n\n\n## Philosophy\nThe philosophy behind the birth of this mutant of grunt-contrib-connect is:\n\n1. Flexibility. I learned a few lessons from working on some enhancement to [Yeoman](http://yeoman.io)'s `server` task. Express.js and Connect are so flexible that the only way to accommodate their full flexibility seems to be accepting a custom module that actually exports such object. An extreme case of this comes from [Socket.io](http://socket.io/#how-to-use), which forces http.Server, express/connect, and socket.io be instanciate in a very specific way.\n2. Grunt/Yeoman is mainly for development/deployment. When rung web server in dev environment, following features are in high demand:\n  * auto-rebuild/auto-reload (both web browser and server), livereload solved only half of this demand. While it may not be common, livereload on the browser end is also a demand for production environment, so I prefer using [tiny-rl](https://github.com/mklabs/tiny-lr) to manage that in my server bootstrap script, rather than a grunt task.\n  * use different base directories where static contents are served. Since development/deployment process is managed by a set of grunt task (and some of the tasks are opinionated), it would seem logical to let grunt task decide which directories to load static contents from.\n\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express');\n```\n\n\n\n\n## Express task\n_Run this task with the `grunt express` command._\n\nNote that this server only runs as long as grunt is running. Once grunt's tasks have completed, the web server stops. This behavior can be changed with the [keepalive](#keepalive) option, and can be enabled ad-hoc by running the task like `grunt connect:keepalive`.\n\nThis task was designed to be used in conjunction with another task that is run immediately afterwards, like the [grunt-contrib-qunit plugin](https://github.com/gruntjs/grunt-contrib-qunit) `qunit` task.\n### Options\n\n#### port\nType: `Integer`\nDefault: `3000`\n\nThe port on which the webserver will respond. The task will fail if the specified port is already in use.\n\n#### hostname\nType: `String`\nDefault: `'localhost'`\n\nThe hostname the webserver will use.\n\n#### bases\nType: `String|Array`\nDefault: `'.'`\n\nThe bases (or root) directories from which files will be served. Defaults to the project Gruntfile's directory.\n\n### supervisor\nType: `Boolean|Object`\nDefault: `false`\n\nWatch for changes and restart the express|connect server. Internally it uses [node-supervisor](https://github.com/isaacs/node-supervisor) to launch the server in a \"supervised\" child process. By default this is `false` so the express|connect will be started as part of the grunt process. You may simple set this to `true` to start \"supervising\" your express|connect server using the following default options(mostly inherited from `node-supervisor`):\n```javascript\nsupervisor: {\n  watch: '.',  // map to '--watch' option, Type: String|Array\n  ignore: null,  //map to '--ignore' option, Type: String|Array\n  pollInterval: 100,  //map to '--poll-interval' option, Type: number\n  extensions: 'node|js', //map to '--extensions' option, Type: String\n  noRestartOn: 'error'  //map to '--no-restart-on' option: 'error'|'exit'\n}\n```\nIf you prefer to roll your own configurations, you may stuff an object instead of just a Boolean `true` for this option. The `--debug` option of supervisor is mapped to the [`debug`](#debug) option of grunt-express.\n\n#### keepalive\nType: `Boolean`\nDefault: `false`\n\nKeep the server alive indefinitely. Note that if this option is enabled, any tasks specified after this task will _never run_. By default, once grunt's tasks have completed, the web server stops. This option changes that behavior.\n\nThis option can also be enabled ad-hoc by running the task like `grunt connect:targetname:keepalive`\n\n### debug\nType: `Boolean`\nDefault: `false`\n\nTurning this option on will make the \"supervised\" express|connect instance output more debugging messages.\n\n#### server\nType: `String`\nDefault: null\n\nThis option allows you to specify a path to a Node.js module that exports a \"connect-like\" object. Such object should have the following two functions:\n\n1. `use(route, fn)` (https://github.com/senchalabs/connect/blob/master/lib/proto.js#L62)\n2. `listen()` (https://github.com/senchalabs/connect/blob/master/lib/proto.js#L227)\n_note: you DO NOT want to call the listen() from within your server module, `express` task will take care of that for you_\n\nThe simplest example would be:\n```js\nvar connect = require('connect');\nmodule.exports = connect();\n```\n\nor if you prefer express.js\n```js\nvar express = require('express');\nvar app = express();\napp.get('/', function(req, res) {\n  res.send('hello!');\n});\nmodule.exports = app;\n```\n\nor if you want to use both express and socket.io\n```js\nvar app = require('express')()\n  , server = require('http').createServer(app)\n  , io = require('socket.io').listen(server);\n\napp.get('/', function (req, res) {\n  res.sendfile(__dirname + '/index.html');\n});\n\nio.sockets.on('connection', function (socket) {\n  socket.emit('news', { hello: 'world' });\n  socket.on('my other event', function (data) {\n    console.log(data);\n  });\n});\n\nexports = module.exports = server;\n// delegates user() function\nexports.use = function() {\n  app.use.apply(app, arguments);\n};\n```\n\nWhen `server` option is not set, `express` task will generate a plain `connect` object for you.\n\n_note: `express` task will generate `static` and `directory` middleware for each of the `bases` you specified, and load them onto your server (or the generated server) object by calling `use()` function_\n\n[project Gruntfile]: Gruntfile.js\n[project unit tests]: test/express_test.js\n\n### Usage examples\n\n#### Basic Use\nIn this example, `grunt express` (or more verbosely, `grunt express:server`) will start a static web server at `http://localhost:9001/`, with its base path set to the `www-root` directory relative to the gruntfile, and any tasks run afterwards will be able to access it.\n\n```javascript\n// Project configuration.\ngrunt.initConfig({\n  connect: {\n    server: {\n      options: {\n        port: 9001,\n        bases: 'www-root'\n      }\n    }\n  }\n});\n```\n\nYou may specify more than one `bases` like so. Enhancing the above example, now your server will server static content from both `www-root` folder and `app/public` folder (both are relative path to the `Gruntfile.js`)\n\n```javascript\n// Project configuration.\ngrunt.initConfig({\n  connect: {\n    server: {\n      options: {\n        port: 9001,\n        bases: ['www-root', 'app/public']\n      }\n    }\n  }\n});\n```\n\nIf you want your web server to use the default options, just omit the `options` object. You still need to specify a target (`uses_defaults` in this example), but the target's configuration object can otherwise be empty or nonexistent. In this example, `grunt express` (or more verbosely, `grunt express:uses_defaults`) will start a static web server using the default options.\n\n```javascript\n// Project configuration.\ngrunt.initConfig({\n  connect: {\n    uses_defaults: {}\n  }\n});\n```\n\n#### Multiple Servers\nYou can specify multiple servers to be run alone or simultaneously by creating a target for each server. In this example, running either `grunt connect:site1` or `grunt connect:site2` will  start the appropriate web server, but running `grunt connect` will run _both_. Note that any server for which the [keepalive](#keepalive) option is specified will prevent _any_ task or target from running after it.\n\n```javascript\n// Project configuration.\ngrunt.initConfig({\n  connect: {\n    site1: {\n      options: {\n        port: 9000,\n        bases: 'www-roots/site1'\n      }\n    },\n    site2: {\n      options: {\n        port: 9001,\n        bases: 'www-roots/site2'\n      }\n    }\n  }\n});\n```\n\n#### Custom express\nLike the [Basic Use](#basic-use) example, this example will start a static web server at `http://localhost:9001/`, with its base path set to the `www-root` directory relative to the gruntfile. Unlike the other example, this will use your custom server script as referred to by `server`! We also set `keepalive` and `watchChanges` to true, so the server will run forever (until you terminate the command), also the server will restart when you apply any changes to your server script.\n\n```javascript\n// Project configuration.\ngrunt.initConfig({\n  express: {\n    custom: {\n      port: 9001,\n      bases: 'www-root',\n      supervisor: true,\n      watchChanges: true,\n      server: path.resolve('./server/main')\n    }\n  }\n});\n```\n\nany in your `server/main.js`, we reuse the previous sample server script\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/', function(req, res) {\n  res.send('hello!');\n});\nmodule.exports = app;\n```\n(open [localhost:9001](http://localhost:9001) and you should see \"hello!\")\n\nNow let's change `server/main.js`'s content to:\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/', function(req, res) {\n  res.send('bonjour!');\n});\nmodule.exports = app;\n```\n(refresh browser and you should see \"bonjour!\")\n\n\n## Release History\n * 2013-02-25   v0.1.3   Fixes #1, changing option \"watchChanges\" to \"supervisor\".\n * 2013-02-24   v0.1.1   Added missing \"connect\" dependency, factored out some logic to util.js.\n * 2013-02-23   v0.1.0   first draft.\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-express@0.1.3",
  "dist": {
    "shasum": "7755172ec49be0ecc44d73d8a88f1af74914da72"
  },
  "_from": "grunt-express@*"
}
